// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  roles          Role[]
  rules          Rule[]
  classes        Classroom[]
  students       Student[]
  punishments    Punishment[]
  forgetfullness forgetfullness[]
  years          SchoolYear[]
  session        Session?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("role")
}

model Session {
  id    Int     @id @default(autoincrement())
  token String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  updatedAt DateTime @updatedAt

  @@map("session")
}

model Rule {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  count       Int
  repeat      Boolean

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("rule")
}

model Classroom {
  id   Int    @id @default(autoincrement())
  name String

  students Student[]
  yearId   Int
  year     SchoolYear          @relation(fields: [yearId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("classroom")
}

model Student {
  id   Int    @id @default(autoincrement())
  name String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  classrooms     Classroom[]
  punishments    Punishment[]
  forgetfullness forgetfullness[]
  years          SchoolYear[]

  @@map("student")
}

model Punishment {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  count       Int

  studentId Int
  student   Student    @relation(fields: [studentId], references: [id])
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  yearId    Int
  year      SchoolYear @relation(fields: [yearId], references: [id])

  createdAt DateTime  @default(now())
  doneAt    DateTime?

  @@map("punishment")
}

model forgetfullness {
  id          Int    @id @default(autoincrement())
  name        String
  school_year Int

  studentId Int
  student   Student    @relation(fields: [studentId], references: [id])
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  yearId    Int
  year      SchoolYear @relation(fields: [yearId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("forgetfullness")
}

model SchoolYear {
  id   Int    @id @default(autoincrement())
  year String

  classrooms     Classroom[]
  students       Student[]
  punishments    Punishment[]
  forgetfullness forgetfullness[]

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("school_year")
}
